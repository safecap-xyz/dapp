import { useState } from 'react';
import config from '../config';

interface DeploymentResult {
  success: boolean;
  smartAccountAddress: string;
  ownerAddress: string;
  deployedAddresses: Record<string, string>;
  deploymentResults: Array<{
    contractIndex: number;
    contractName?: string;
    userOpHash?: string;
    transactionHash?: string;
    deployedAddress?: string;
    error?: string;
  }>;
}

const TestContractDeployment = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [result, setResult] = useState<DeploymentResult | null>(null);
  const [contractData, setContractData] = useState<string>(`[
  {
    "name": "Factory",
    "to": "0x0000000000000000000000000000000000000000",
    "value": "0",
    "data": "0x608060405234801561001057600080fd5b50610771806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063485cc95514610046578063c1957523146100625780635c60da1b1461007e575b600080fd5b610060600480360381019061005b91906104a0565b61009c565b005b61007c60048036038101906100779190610539565b610290565b005b6100866103c4565b60405161009391906105a1565b60405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561010c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161010390610619565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561017c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017390610685565b60405180910390fd5b6000806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008190508073ffffffffffffffffffffffffffffffffffffffff1663485cc9556000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600067ffffffffffffffff81111561021f5761021e6106a5565b5b6040519080825280601f01601f19166020018201604052801561025157816020015b610240610448565b8152602001906001900390816102365790505b5060405160200161026493929190610720565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161029293929190610731565b600060405180830381600087803b1580156102ac57600080fd5b505af11580156102c0573d6000803e3d6000fd5b505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610320576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031790610685565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f4bb28a0a3f9d85b00d124b58dcf793b8b4f9c09e4d4a9ed0e1f19b65e73aeeba60405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081359050610417816106f8565b92915050565b600081359050610428816106f8565b92915050565b600081359050610439816106f8565b92915050565b6040518060200160405280600081525090565b60008135905061045e81610710565b92915050565b60008151905061047381610710565b92915050565b600060208284031215610489578081fd5b60006104978482850161044f565b91505092915050565b600080604083850312156104b2578081fd5b60006104c08582860161042a565b92505060206104d18582860161042a565b9150509250929050565b6000806000606084860312156104ee578081fd5b60006104fc8682870161042a565b935050602061050d8682870161042a565b925050604061051e8682870161044f565b9150509250925092565b60006020828403121561054a578081fd5b600061055884828501610408565b91505092915050565b61056a81610686565b82525050565b61057981610686565b82525050565b61058881610698565b82525050565b61059b81610698565b82525050565b60006020820190506105b66000830184610570565b92915050565b60006020820190506105d16000830184610592565b92915050565b600060208201905081810360008301526105f0816106d4565b9050919050565b600060208201905081810360008301526106108161068c565b9050919050565b6000602082019050818103600083015261063481610644565b9050919050565b600060208201905081810360008301526106548161066c565b9050919050565b60008160601b9050919050565b600061067382610659565b9050919050565b600061068582610659565b9050919050565b60006106a082610659565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061070182610659565b9050919050565b61071081610698565b811461071b57600080fd5b50565b61072981610698565b811461073457600080fd5b5056fea2646970667358221220d8b2163d2c8001b9a8054f4dd5a14c42b5c42c70e7aa2f8d2f4e57d7d70b33f964736f6c63430008000033"
  },
  {
    "name": "NFT",
    "to": "0x0000000000000000000000000000000000000000",
    "value": "0",
    "data": "0x608060405234801561001057600080fd5b506040518060400160405280600581526020017f546f6b656e0000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f544f4b00000000000000000000000000000000000000000000000000000000008152508160009080519060200190610089929190610121565b5080600190805190602001906100a0929190610121565b505050610220565b828054610100906101b8565b90600052602060002090601f0160209004810192826103d05760008555610417565b82601f106103e957805160ff1916838001178555610417565b82800160010185558215610417579182015b82811115610416578251825591602001919060010190610417565b5b5090506104249190610428565b5090565b5b8082111561044157600081600090555060010161042a565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806104d057607f821691505b602082108103610483576104826104a5565b5b50919050565b611a5d806102306000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80634f6ccce7116100715780634f6ccce71461016d5780636352211e1461019d578063704802751461019d57806370a08231146101cd578063a22cb465146101fd578063b88d4fde14610219578063c87b56dd14610235578063e985e9c514610265576100a9565b806301ffc9a7146100ae57806306fdde03146100de578063081812fc146100fc578063095ea7b31461012c57806323b872dd14610148575b600080fd5b6100c860048036038101906100c39190610f4c565b610295565b6040516100d59190611249565b60405180910390f35b6100e6610377565b6040516100f39190611264565b60405180910390f35b61011660048036038101906101119190610fa1565b610409565b60405161012391906111ce565b60405180910390f35b61014660048036038101906101419190610f10565b61048e565b005b610166600480360381019061016191906100e3565b6105a6565b005b61018760048036038101906101829190610fa1565b610606565b6040516101949190611386565b60405180910390f35b6101b760048036038101906101b29190610fa1565b61067c565b6040516101c491906111ce565b60405180910390f35b6101e760048036038101906101e29190610e7a565b61072e565b6040516101f49190611386565b60405180910390f35b61021760048036038101906102129190610ed0565b6107e6565b005b610233600480360381019061022e9190610e35565b61092a565b005b61024f600480360381019061024a9190610fa1565b61098c565b60405161025c9190611264565b60405180910390f35b61027f600480360381019061027a9190610ea3565b610a9e565b60405161028c9190611249565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061036057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610370575061036f82610b32565b5b9050919050565b60606000805461038690611516565b80601f01602080910402602001604051908101604052809291908181526020018280546103b290611516565b80156103ff5780601f106103d4576101008083540402835291602001916103ff565b820191906000526020600020905b8154815290600101906020018083116103e257829003601f168201915b5050505050905090565b600061041482610b9c565b610453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044a906112e6565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061049982610c08565b905061048a816104a7610ca8565b610cb0565b5050565b60006104b182610c08565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610522576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610519906113a6565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661054161048a565b73ffffffffffffffffffffffffffffffffffffffff161461059b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610592906112a6565b60405180910390fd5b6105a58383610e8e565b505050565b6105b76105b1610ca8565b82610f47565b6105f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ed90611346565b60405180910390fd5b610601838383611025565b505050565b600061061060611281565b8210610651576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610648906113c6565b60405180910390fd5b600061065c60611281565b8303905060006106746001836115a990919063ffffffff16565b9050809250505090565b600061068782610b9c565b6106c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bd906112e6565b60405180910390fd5b60006106d183610c08565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061071057506107108185610a9e565b806107275750610726818561072e565b5b91505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561079f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610796906113e6565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6107ee610ca8565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561085c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610853906112c6565b60405180910390fd5b8060056000610869610ca8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610916610ca8565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610955919061124e565b60405180910390a35050565b61093b610935610ca8565b83610f47565b61097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097190611346565b60405180910390fd5b61098684848484611280565b50505050565b606061099782610b9c565b6109d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cd90611366565b60405180910390fd5b60006109e0611281565b905060008167ffffffffffffffff811115610a0257610a016115bf565b5b604051908082528060200260200182016040528015610a305781602001602082028036833780820191505090505b50905060005b82811015610a9457610a4884610c08565b828281518110610a5e57610a5d6115ee565b5b602090810291909101015280610a8c90611546565b915080610a8c90611546565b9150600101610a36565b508092505050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610d2383610c08565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610d6f82610b9c565b610dae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da5906112e6565b60405180910390fd5b6000610db983610c08565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610dfa5750610df98185610a9e565b5b8015610e2a5750610e0983610c08565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b6000610e4182610c08565b9050610e4f818361072e565b610e8857610e5c82610c08565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610e87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7e90611326565b60405180910390fd5b5b505050565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610f0183610c08565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610f5282610b9c565b8015610f835750600073ffffffffffffffffffffffffffffffffffffffff16610f7883610c08565b73ffffffffffffffffffffffffffffffffffffffff16145b8015610f945750610f9383610ca8565b5b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611015576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100c90611306565b60405180910390fd5b61101e81611281565b61102281611281565b5050565b8273ffffffffffffffffffffffffffffffffffffffff1661104582610c08565b73ffffffffffffffffffffffffffffffffffffffff16146110a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109890611286565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611111576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611108906113e6565b60405180910390fd5b61111c838383611281565b611127600082610cb0565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461117791906115bf565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111ce91906115a9565b92505081905550816002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061128b60611281565b905090565b60005b8381101561129e578181015183820152602001611286565b838111156112ad576000848401525b50505050565b600060208201905081810360008301526112cf81846112a6565b905092915050565b600060208201905081810360008301526112ef816112a6565b9050919050565b600060208201905081810360008301526113108161130f565b9050919050565b600060208201905081810360008301526113308161132f565b9050919050565b600060208201905081810360008301526113508161134f565b9050919050565b600060208201905081810360008301526113708161136f565b9050919050565b600060208201905061138c6000830184611386565b92915050565b600060208201905081810360008301526113ab816113aa565b9050919050565b600060208201905081810360008301526113cb816113ca565b9050919050565b600060208201905081810360008301526113eb816113ea565b9050919050565b600060208201905061140760008301846113e6565b92915050565b600061141882611516565b915061142383611516565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561145857611457611516565b5b828201905092915050565b600061146e82611516565b915061147983611516565b92508261148957611488611516565b5b828204905092915050565b600061149f82611516565b91506114aa83611516565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156114e3576114e2611516565b5b828202905092915050565b600061149982611516565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561152e5761152d611516565b5b600182019050919050565b600061154382611516565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036115755761157461151d565b5b600182019050919050565b600061158b82611516565b915061159683611516565b9250828210156115a9576115a8611516565b5b828203905092915050565b60006115b582611516565b91506115c083611516565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611516565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220d8b2163d2c8001b9a8054f4dd5a14c42b5c42c70e7aa2f8d2f4e57d7d70b33f964736f6c63430008000033"
  },
  {
    "name": "UpdateFactory",
    "to": "FACTORY_ADDRESS",
    "value": "0",
    "data": "0x5c60da1b",
    "replacements": {
      "FACTORY_ADDRESS": "Factory"
    }
  }
]`);

  const deployContracts = async () => {
    try {
      setLoading(true);
      setError(null);
      setResult(null);
      
      // Parse the contract data
      let parsedData;
      try {
        parsedData = JSON.parse(contractData);
      } catch (parseErr) {
        throw new Error(`Invalid JSON format: ${parseErr instanceof Error ? parseErr.message : 'Unknown parsing error'}`);
      }
      
      console.log('Deploying contracts with data:', parsedData);
      
      const response = await fetch(`${config.apiBaseUrl}/api/sample-user-operation`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contractData: parsedData,
          network: 'base-sepolia'
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || 'Failed to deploy contracts');
      }

      const data = await response.json();
      console.log('Deployment result:', data);
      setResult(data);
    } catch (err) {
      console.error('Error deploying contracts:', err);
      setError(err instanceof Error ? err.message : 'An unknown error occurred');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-4 bg-primary-dark/30 rounded-lg border border-secondary-main/30">
      <h2 className="text-xl font-bold text-text-primary mb-4 font-secondary">Test Contract Deployment</h2>
      
      <div className="mb-4">
        <label className="block text-text-primary mb-2">Contract Data (JSON):</label>
        <textarea
          className="w-full h-64 p-2 bg-primary-dark border border-secondary-main/50 rounded text-text-primary font-mono text-sm"
          value={contractData}
          onChange={(e) => setContractData(e.target.value)}
        />
      </div>

      <button
        className="px-4 py-2 bg-secondary-main text-text-primary rounded hover:bg-secondary-main/80 disabled:opacity-50 disabled:cursor-not-allowed"
        onClick={deployContracts}
        disabled={loading}
      >
        {loading ? 'Deploying...' : 'Deploy Contracts'}
      </button>

      {error && (
        <div className="mt-4 p-3 bg-red-500/20 border border-red-500 rounded text-red-500">
          {error}
        </div>
      )}

      {result && (
        <div className="mt-4 p-3 bg-green-500/20 border border-green-500 rounded">
          <h3 className="text-lg font-bold text-green-500 mb-2">Deployment Successful!</h3>
          
          <div className="mb-2">
            <span className="font-semibold text-text-primary">Smart Account Address:</span>
            <span className="ml-2 text-text-secondary font-mono break-all">{result.smartAccountAddress}</span>
          </div>
          
          <div className="mb-2">
            <span className="font-semibold text-text-primary">Owner Address:</span>
            <span className="ml-2 text-text-secondary font-mono break-all">{result.ownerAddress}</span>
          </div>
          
          {result.deploymentResults && result.deploymentResults.length > 0 && (
            <div className="mt-4">
              <h4 className="text-md font-bold text-text-primary mb-2">Deployment Results:</h4>
              {result.deploymentResults.map((deployResult, index) => (
                <div key={index} className="mb-4 p-3 bg-primary-dark/50 rounded border border-secondary-main/30">
                  <div className="grid grid-cols-1 gap-2">
                    {deployResult.contractName && (
                      <div>
                        <span className="font-semibold text-text-primary">Contract:</span>
                        <span className="ml-2 text-text-secondary">{deployResult.contractName}</span>
                      </div>
                    )}
                    {deployResult.userOpHash && (
                      <div>
                        <span className="font-semibold text-text-primary">User Operation Hash:</span>
                        <span className="ml-2 text-text-secondary font-mono break-all">{deployResult.userOpHash}</span>
                      </div>
                    )}
                    {deployResult.transactionHash && (
                      <div>
                        <span className="font-semibold text-text-primary">Transaction Hash:</span>
                        <span className="ml-2 text-text-secondary font-mono break-all">{deployResult.transactionHash}</span>
                      </div>
                    )}
                    {deployResult.deployedAddress && (
                      <div>
                        <span className="font-semibold text-text-primary">Deployed Address:</span>
                        <span className="ml-2 text-text-secondary font-mono break-all">{deployResult.deployedAddress}</span>
                      </div>
                    )}
                    {deployResult.error && (
                      <div className="text-red-500">
                        <span className="font-semibold">Error:</span>
                        <span className="ml-2 font-mono break-all">{deployResult.error}</span>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
          
          {result.deployedAddresses && Object.keys(result.deployedAddresses).length > 0 && (
            <div className="mt-4">
              <h4 className="text-md font-bold text-text-primary mb-2">Deployed Addresses:</h4>
              <div className="bg-primary-dark/50 rounded border border-secondary-main/30 p-3">
                {Object.entries(result.deployedAddresses).map(([name, address]) => (
                  <div key={name} className="mb-2">
                    <span className="font-semibold text-text-primary">{name}:</span>
                    <span className="ml-2 text-text-secondary font-mono break-all">{address as string}</span>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default TestContractDeployment;
